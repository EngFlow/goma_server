// Code generated by protoc-gen-go. DO NOT EDIT.
// source: exec/exec_service.proto

package devtools_goma

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	api "go.chromium.org/goma/server/proto/api"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// TODO: reconsider good error codes.
type ExecServiceApplicationError int32

const (
	ExecServiceApplicationError_BAD_REQUEST                ExecServiceApplicationError = -1
	ExecServiceApplicationError_EXEC_OK                    ExecServiceApplicationError = 0
	ExecServiceApplicationError_EXECUTABLE_NOT_READY       ExecServiceApplicationError = 1
	ExecServiceApplicationError_DISK_EXCEEDED              ExecServiceApplicationError = 2
	ExecServiceApplicationError_EXEC_INTERNAL_ERROR        ExecServiceApplicationError = 3
	ExecServiceApplicationError_EXECUTOR_IS_LOADING        ExecServiceApplicationError = 4
	ExecServiceApplicationError_EXECUTOR_MEMORY_NOT_ENOUGH ExecServiceApplicationError = 5
)

var ExecServiceApplicationError_name = map[int32]string{
	-1: "BAD_REQUEST",
	0:  "EXEC_OK",
	1:  "EXECUTABLE_NOT_READY",
	2:  "DISK_EXCEEDED",
	3:  "EXEC_INTERNAL_ERROR",
	4:  "EXECUTOR_IS_LOADING",
	5:  "EXECUTOR_MEMORY_NOT_ENOUGH",
}

var ExecServiceApplicationError_value = map[string]int32{
	"BAD_REQUEST":                -1,
	"EXEC_OK":                    0,
	"EXECUTABLE_NOT_READY":       1,
	"DISK_EXCEEDED":              2,
	"EXEC_INTERNAL_ERROR":        3,
	"EXECUTOR_IS_LOADING":        4,
	"EXECUTOR_MEMORY_NOT_ENOUGH": 5,
}

func (x ExecServiceApplicationError) Enum() *ExecServiceApplicationError {
	p := new(ExecServiceApplicationError)
	*p = x
	return p
}

func (x ExecServiceApplicationError) String() string {
	return proto.EnumName(ExecServiceApplicationError_name, int32(x))
}

func (x *ExecServiceApplicationError) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ExecServiceApplicationError_value, data, "ExecServiceApplicationError")
	if err != nil {
		return err
	}
	*x = ExecServiceApplicationError(value)
	return nil
}

func (ExecServiceApplicationError) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_86aa5ae33157a9d0, []int{0}
}

func init() {
	proto.RegisterEnum("devtools_goma.ExecServiceApplicationError", ExecServiceApplicationError_name, ExecServiceApplicationError_value)
}

func init() {
	proto.RegisterFile("exec/exec_service.proto", fileDescriptor_86aa5ae33157a9d0)
}

var fileDescriptor_86aa5ae33157a9d0 = []byte{
	// 281 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x50, 0x41, 0x4b, 0xf3, 0x40,
	0x10, 0xcd, 0x7e, 0x5f, 0x45, 0xdc, 0x52, 0x58, 0xb7, 0x62, 0x4a, 0x04, 0x0f, 0x1e, 0x3d, 0xa4,
	0xe0, 0xcd, 0xe3, 0xa6, 0x3b, 0xb4, 0xa1, 0x69, 0x16, 0x37, 0x09, 0xb4, 0xa7, 0x21, 0xa4, 0x8b,
	0x04, 0xaa, 0x1b, 0x93, 0x50, 0x7a, 0xf4, 0xe8, 0xd1, 0xff, 0xe4, 0x0f, 0x53, 0xd2, 0x52, 0x51,
	0x70, 0x0e, 0xc3, 0xbc, 0xf7, 0xe6, 0x31, 0xcc, 0xa3, 0xae, 0xd9, 0x99, 0x62, 0xdc, 0x35, 0x6c,
	0x4c, 0xbd, 0x2d, 0x0b, 0xe3, 0x57, 0xb5, 0x6d, 0x2d, 0x1f, 0xac, 0xcd, 0xb6, 0xb5, 0x76, 0xd3,
	0xe0, 0xa3, 0x7d, 0xca, 0xbd, 0x61, 0x5e, 0x95, 0xe3, 0x6e, 0xc2, 0x75, 0xde, 0xe6, 0x87, 0x9d,
	0xdb, 0x0f, 0x42, 0xaf, 0x60, 0x67, 0x8a, 0xe4, 0xe0, 0x14, 0x55, 0xb5, 0x29, 0x8b, 0xbc, 0x2d,
	0xed, 0x33, 0xd4, 0xb5, 0xad, 0xf9, 0x88, 0xf6, 0x03, 0x21, 0x51, 0xc3, 0x43, 0x06, 0x49, 0xca,
	0x3e, 0x8f, 0x45, 0x78, 0x9f, 0x9e, 0xc2, 0x12, 0x26, 0xa8, 0xe6, 0xcc, 0xe1, 0x23, 0x7a, 0xd1,
	0x81, 0x2c, 0x15, 0x41, 0x04, 0x18, 0xab, 0x14, 0x35, 0x08, 0xb9, 0x62, 0x84, 0x9f, 0xd3, 0x81,
	0x0c, 0x93, 0x39, 0xc2, 0x72, 0x02, 0x20, 0x41, 0xb2, 0x7f, 0xdc, 0xa5, 0xc3, 0xbd, 0x33, 0x8c,
	0x53, 0xd0, 0xb1, 0x88, 0x10, 0xb4, 0x56, 0x9a, 0xfd, 0x3f, 0x0a, 0x59, 0xaa, 0x34, 0x86, 0x09,
	0x46, 0x4a, 0xc8, 0x30, 0x9e, 0xb2, 0x1e, 0xbf, 0xa6, 0xde, 0xb7, 0xb0, 0x80, 0x85, 0xd2, 0xab,
	0xfd, 0x0d, 0x88, 0x55, 0x36, 0x9d, 0xb1, 0x93, 0xbb, 0x19, 0xed, 0xff, 0x78, 0x82, 0xdf, 0xd3,
	0x5e, 0x07, 0xf9, 0xa5, 0xff, 0x2b, 0x01, 0xbf, 0x23, 0xb5, 0x79, 0xf1, 0xdc, 0x3f, 0xf9, 0xa6,
	0xba, 0x71, 0x82, 0xb3, 0x57, 0xe2, 0xbc, 0x11, 0xe7, 0x9d, 0x38, 0x5f, 0x01, 0x00, 0x00, 0xff,
	0xff, 0x76, 0x1a, 0xd4, 0xff, 0x58, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ExecServiceClient is the client API for ExecService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ExecServiceClient interface {
	Exec(ctx context.Context, in *api.ExecReq, opts ...grpc.CallOption) (*api.ExecResp, error)
}

type execServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewExecServiceClient(cc grpc.ClientConnInterface) ExecServiceClient {
	return &execServiceClient{cc}
}

func (c *execServiceClient) Exec(ctx context.Context, in *api.ExecReq, opts ...grpc.CallOption) (*api.ExecResp, error) {
	out := new(api.ExecResp)
	err := c.cc.Invoke(ctx, "/devtools_goma.ExecService/Exec", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExecServiceServer is the server API for ExecService service.
type ExecServiceServer interface {
	Exec(context.Context, *api.ExecReq) (*api.ExecResp, error)
}

// UnimplementedExecServiceServer can be embedded to have forward compatible implementations.
type UnimplementedExecServiceServer struct {
}

func (*UnimplementedExecServiceServer) Exec(ctx context.Context, req *api.ExecReq) (*api.ExecResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Exec not implemented")
}

func RegisterExecServiceServer(s *grpc.Server, srv ExecServiceServer) {
	s.RegisterService(&_ExecService_serviceDesc, srv)
}

func _ExecService_Exec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.ExecReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExecServiceServer).Exec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/devtools_goma.ExecService/Exec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExecServiceServer).Exec(ctx, req.(*api.ExecReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _ExecService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "devtools_goma.ExecService",
	HandlerType: (*ExecServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Exec",
			Handler:    _ExecService_Exec_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "exec/exec_service.proto",
}
