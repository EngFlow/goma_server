// Copyright 2011 The Goma Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0
// 	protoc        v3.11.4
// source: execlog/log_service.proto

package execlog

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	api "go.chromium.org/goma/server/proto/api"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

var File_execlog_log_service_proto protoreflect.FileDescriptor

var file_execlog_log_service_proto_rawDesc = []byte{
	0x0a, 0x19, 0x65, 0x78, 0x65, 0x63, 0x6c, 0x6f, 0x67, 0x2f, 0x6c, 0x6f, 0x67, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x64, 0x65, 0x76,
	0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x5f, 0x67, 0x6f, 0x6d, 0x61, 0x1a, 0x12, 0x61, 0x70, 0x69, 0x2f,
	0x67, 0x6f, 0x6d, 0x61, 0x5f, 0x6c, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x32, 0x50,
	0x0a, 0x0a, 0x4c, 0x6f, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x42, 0x0a, 0x07,
	0x53, 0x61, 0x76, 0x65, 0x4c, 0x6f, 0x67, 0x12, 0x19, 0x2e, 0x64, 0x65, 0x76, 0x74, 0x6f, 0x6f,
	0x6c, 0x73, 0x5f, 0x67, 0x6f, 0x6d, 0x61, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x4c, 0x6f, 0x67, 0x52,
	0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x64, 0x65, 0x76, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x5f, 0x67, 0x6f,
	0x6d, 0x61, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00,
	0x42, 0x34, 0x5a, 0x29, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x67, 0x6f, 0x6d, 0x61, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x6c, 0x6f, 0x67, 0x80, 0x01, 0x00,
	0x88, 0x01, 0x00, 0x90, 0x01, 0x00,
}

var file_execlog_log_service_proto_goTypes = []interface{}{
	(*api.SaveLogReq)(nil),  // 0: devtools_goma.SaveLogReq
	(*api.SaveLogResp)(nil), // 1: devtools_goma.SaveLogResp
}
var file_execlog_log_service_proto_depIdxs = []int32{
	0, // 0: devtools_goma.LogService.SaveLog:input_type -> devtools_goma.SaveLogReq
	1, // 1: devtools_goma.LogService.SaveLog:output_type -> devtools_goma.SaveLogResp
	1, // [1:2] is the sub-list for method output_type
	0, // [0:1] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_execlog_log_service_proto_init() }
func file_execlog_log_service_proto_init() {
	if File_execlog_log_service_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_execlog_log_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_execlog_log_service_proto_goTypes,
		DependencyIndexes: file_execlog_log_service_proto_depIdxs,
	}.Build()
	File_execlog_log_service_proto = out.File
	file_execlog_log_service_proto_rawDesc = nil
	file_execlog_log_service_proto_goTypes = nil
	file_execlog_log_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// LogServiceClient is the client API for LogService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LogServiceClient interface {
	SaveLog(ctx context.Context, in *api.SaveLogReq, opts ...grpc.CallOption) (*api.SaveLogResp, error)
}

type logServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLogServiceClient(cc grpc.ClientConnInterface) LogServiceClient {
	return &logServiceClient{cc}
}

func (c *logServiceClient) SaveLog(ctx context.Context, in *api.SaveLogReq, opts ...grpc.CallOption) (*api.SaveLogResp, error) {
	out := new(api.SaveLogResp)
	err := c.cc.Invoke(ctx, "/devtools_goma.LogService/SaveLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LogServiceServer is the server API for LogService service.
type LogServiceServer interface {
	SaveLog(context.Context, *api.SaveLogReq) (*api.SaveLogResp, error)
}

// UnimplementedLogServiceServer can be embedded to have forward compatible implementations.
type UnimplementedLogServiceServer struct {
}

func (*UnimplementedLogServiceServer) SaveLog(context.Context, *api.SaveLogReq) (*api.SaveLogResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveLog not implemented")
}

func RegisterLogServiceServer(s *grpc.Server, srv LogServiceServer) {
	s.RegisterService(&_LogService_serviceDesc, srv)
}

func _LogService_SaveLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.SaveLogReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogServiceServer).SaveLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/devtools_goma.LogService/SaveLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogServiceServer).SaveLog(ctx, req.(*api.SaveLogReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _LogService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "devtools_goma.LogService",
	HandlerType: (*LogServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SaveLog",
			Handler:    _LogService_SaveLog_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "execlog/log_service.proto",
}
