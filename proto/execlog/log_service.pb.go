// Code generated by protoc-gen-go. DO NOT EDIT.
// source: execlog/log_service.proto

package devtools_goma

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	api "go.chromium.org/goma/server/proto/api"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("execlog/log_service.proto", fileDescriptor_a47cf8dc6db25b78) }

var fileDescriptor_a47cf8dc6db25b78 = []byte{
	// 131 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x4c, 0xad, 0x48, 0x4d,
	0xce, 0xc9, 0x4f, 0xd7, 0xcf, 0xc9, 0x4f, 0x8f, 0x2f, 0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e, 0xd5,
	0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x4d, 0x49, 0x2d, 0x2b, 0xc9, 0xcf, 0xcf, 0x29, 0x8e,
	0x4f, 0xcf, 0xcf, 0x4d, 0x94, 0x12, 0x4a, 0x2c, 0xc8, 0xd4, 0x07, 0xb1, 0xe2, 0x73, 0xf2, 0xd3,
	0x21, 0x4a, 0x8c, 0x02, 0xb8, 0xb8, 0x7c, 0xf2, 0xd3, 0x83, 0x21, 0xda, 0x84, 0x9c, 0xb8, 0xd8,
	0x83, 0x13, 0xcb, 0x52, 0x7d, 0xf2, 0xd3, 0x85, 0x24, 0xf5, 0x50, 0x34, 0xeb, 0x41, 0xc5, 0x83,
	0x52, 0x0b, 0xa5, 0xa4, 0x70, 0x49, 0x15, 0x17, 0x28, 0x31, 0x38, 0x71, 0x36, 0x30, 0x32, 0x74,
	0x30, 0x32, 0x4c, 0x60, 0x64, 0x00, 0x04, 0x00, 0x00, 0xff, 0xff, 0x50, 0xab, 0xf8, 0x96, 0x9b,
	0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// LogServiceClient is the client API for LogService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LogServiceClient interface {
	SaveLog(ctx context.Context, in *api.SaveLogReq, opts ...grpc.CallOption) (*api.SaveLogResp, error)
}

type logServiceClient struct {
	cc *grpc.ClientConn
}

func NewLogServiceClient(cc *grpc.ClientConn) LogServiceClient {
	return &logServiceClient{cc}
}

func (c *logServiceClient) SaveLog(ctx context.Context, in *api.SaveLogReq, opts ...grpc.CallOption) (*api.SaveLogResp, error) {
	out := new(api.SaveLogResp)
	err := c.cc.Invoke(ctx, "/devtools_goma.LogService/SaveLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LogServiceServer is the server API for LogService service.
type LogServiceServer interface {
	SaveLog(context.Context, *api.SaveLogReq) (*api.SaveLogResp, error)
}

func RegisterLogServiceServer(s *grpc.Server, srv LogServiceServer) {
	s.RegisterService(&_LogService_serviceDesc, srv)
}

func _LogService_SaveLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.SaveLogReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogServiceServer).SaveLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/devtools_goma.LogService/SaveLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogServiceServer).SaveLog(ctx, req.(*api.SaveLogReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _LogService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "devtools_goma.LogService",
	HandlerType: (*LogServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SaveLog",
			Handler:    _LogService_SaveLog_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "execlog/log_service.proto",
}
