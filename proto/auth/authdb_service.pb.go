// Code generated by protoc-gen-go. DO NOT EDIT.
// source: auth/authdb_service.proto

package auth

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("auth/authdb_service.proto", fileDescriptor_2b553d7f571c1da7) }

var fileDescriptor_2b553d7f571c1da7 = []byte{
	// 115 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x4c, 0x2c, 0x2d, 0xc9,
	0xd0, 0x07, 0x11, 0x29, 0x49, 0xf1, 0xc5, 0xa9, 0x45, 0x65, 0x99, 0xc9, 0xa9, 0x7a, 0x05, 0x45,
	0xf9, 0x25, 0xf9, 0x42, 0x2c, 0x20, 0x51, 0x29, 0x41, 0x24, 0x05, 0x10, 0x09, 0xa3, 0x48, 0x2e,
	0x5e, 0xc7, 0xd2, 0x92, 0x0c, 0x17, 0xa7, 0x60, 0x88, 0x7a, 0x21, 0x0f, 0x2e, 0x7e, 0xe7, 0x8c,
	0xd4, 0xe4, 0x6c, 0xdf, 0xd4, 0xdc, 0xa4, 0xd4, 0xa2, 0xe2, 0x8c, 0xcc, 0x02, 0x21, 0x09, 0x3d,
	0x90, 0x16, 0x3d, 0x34, 0xe1, 0xa0, 0xd4, 0x42, 0x29, 0x49, 0x1c, 0x32, 0xc5, 0x05, 0x4a, 0x0c,
	0x49, 0x6c, 0x60, 0x1b, 0x8c, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0x9b, 0xa8, 0xc2, 0x0c, 0x97,
	0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// AuthDBServiceClient is the client API for AuthDBService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AuthDBServiceClient interface {
	CheckMembership(ctx context.Context, in *CheckMembershipReq, opts ...grpc.CallOption) (*CheckMembershipResp, error)
}

type authDBServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthDBServiceClient(cc grpc.ClientConnInterface) AuthDBServiceClient {
	return &authDBServiceClient{cc}
}

func (c *authDBServiceClient) CheckMembership(ctx context.Context, in *CheckMembershipReq, opts ...grpc.CallOption) (*CheckMembershipResp, error) {
	out := new(CheckMembershipResp)
	err := c.cc.Invoke(ctx, "/auth.AuthDBService/CheckMembership", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthDBServiceServer is the server API for AuthDBService service.
type AuthDBServiceServer interface {
	CheckMembership(context.Context, *CheckMembershipReq) (*CheckMembershipResp, error)
}

// UnimplementedAuthDBServiceServer can be embedded to have forward compatible implementations.
type UnimplementedAuthDBServiceServer struct {
}

func (*UnimplementedAuthDBServiceServer) CheckMembership(ctx context.Context, req *CheckMembershipReq) (*CheckMembershipResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckMembership not implemented")
}

func RegisterAuthDBServiceServer(s *grpc.Server, srv AuthDBServiceServer) {
	s.RegisterService(&_AuthDBService_serviceDesc, srv)
}

func _AuthDBService_CheckMembership_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckMembershipReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthDBServiceServer).CheckMembership(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthDBService/CheckMembership",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthDBServiceServer).CheckMembership(ctx, req.(*CheckMembershipReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _AuthDBService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "auth.AuthDBService",
	HandlerType: (*AuthDBServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckMembership",
			Handler:    _AuthDBService_CheckMembership_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "auth/authdb_service.proto",
}
